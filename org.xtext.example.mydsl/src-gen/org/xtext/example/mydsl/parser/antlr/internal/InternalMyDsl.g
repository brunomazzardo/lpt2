/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getComputeComputeParserRuleCall_0());
			}
			lv_compute_0_0=ruleCompute
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"compute",
					lv_compute_0_0,
					"org.xtext.example.mydsl.MyDsl.Compute");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleCompute
entryRuleCompute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComputeRule()); }
	iv_ruleCompute=ruleCompute
	{ $current=$iv_ruleCompute.current; }
	EOF;

// Rule Compute
ruleCompute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(define'
		{
			newLeafNode(otherlv_0, grammarAccess.getComputeAccess().getDefineKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getComputeAccess().getParametroParserRuleCall_1());
		}
		this_Parametro_1=ruleParametro
		{
			$current = $this_Parametro_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getComputeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParametro
entryRuleParametro returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametroRule()); }
	iv_ruleParametro=ruleParametro
	{ $current=$iv_ruleParametro.current; }
	EOF;

// Rule Parametro
ruleParametro returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParametroAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametroAccess().getExpExpressaoParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleexpressao
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametroRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"org.xtext.example.mydsl.MyDsl.expressao");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParametroAccess().getVarVariavelParserRuleCall_2_0());
				}
				lv_var_2_0=rulevariavel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametroRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"org.xtext.example.mydsl.MyDsl.variavel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParametroAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleexpressao
entryRuleexpressao returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressaoRule()); }
	iv_ruleexpressao=ruleexpressao
	{ $current=$iv_ruleexpressao.current.getText(); }
	EOF;

// Rule expressao
ruleexpressao returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_letters_0=RULE_LETTERS
	{
		$current.merge(this_letters_0);
	}
	{
		newLeafNode(this_letters_0, grammarAccess.getExpressaoAccess().getLettersTerminalRuleCall());
	}
;

// Entry rule entryRulevariavel
entryRulevariavel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariavelRule()); }
	iv_rulevariavel=rulevariavel
	{ $current=$iv_rulevariavel.current.getText(); }
	EOF;

// Rule variavel
rulevariavel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_letters_0=RULE_LETTERS
		{
			$current.merge(this_letters_0);
		}
		{
			newLeafNode(this_letters_0, grammarAccess.getVariavelAccess().getLettersTerminalRuleCall_0());
		}
		    |
		this_digit_1=RULE_DIGIT
		{
			$current.merge(this_digit_1);
		}
		{
			newLeafNode(this_digit_1, grammarAccess.getVariavelAccess().getDigitTerminalRuleCall_1());
		}
	)
;

RULE_RESULTADO : (RULE_LETTERS|RULE_DIGIT);

RULE_SINAL : ('>'|'<'|'+'|'-'|'*'|'/');

RULE_DIGIT : ('0'..'9')*;

RULE_LETTERS : ('a'..'z')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
