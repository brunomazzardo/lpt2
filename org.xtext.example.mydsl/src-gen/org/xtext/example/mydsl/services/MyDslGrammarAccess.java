/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cComputeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cComputeComputeParserRuleCall_0 = (RuleCall)cComputeAssignment.eContents().get(0);
		
		//Model:
		//	compute=Compute;
		@Override public ParserRule getRule() { return rule; }
		
		//compute=Compute
		public Assignment getComputeAssignment() { return cComputeAssignment; }
		
		//Compute
		public RuleCall getComputeComputeParserRuleCall_0() { return cComputeComputeParserRuleCall_0; }
	}
	public class ComputeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Compute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cParametroParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Compute:
		//	'(define' Parametro ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(define' Parametro ')'
		public Group getGroup() { return cGroup; }
		
		//'(define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//Parametro
		public RuleCall getParametroParserRuleCall_1() { return cParametroParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParametroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Parametro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVariavelParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parametro:
		//	'(' exp=expressao var=variavel ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=expressao var=variavel ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=expressao
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//expressao
		public RuleCall getExpExpressaoParserRuleCall_1_0() { return cExpExpressaoParserRuleCall_1_0; }
		
		//var=variavel
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//variavel
		public RuleCall getVarVariavelParserRuleCall_2_0() { return cVarVariavelParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RecursivoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Recursivo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameExpressaoParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSinalTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameVariavelParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameVariavelParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////If:
		// //	'( if' Comparacao name=variavel ')' name=resultado '(' name=sinal '(' Recursivo
		// //;
		// Recursivo:
		//	'(' name=expressao '(' name=sinal name=variavel name=variavel ')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=expressao '(' name=sinal name=variavel name=variavel ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=expressao
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//expressao
		public RuleCall getNameExpressaoParserRuleCall_1_0() { return cNameExpressaoParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=sinal
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//sinal
		public RuleCall getNameSinalTerminalRuleCall_3_0() { return cNameSinalTerminalRuleCall_3_0; }
		
		//name=variavel
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//variavel
		public RuleCall getNameVariavelParserRuleCall_4_0() { return cNameVariavelParserRuleCall_4_0; }
		
		//name=variavel
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//variavel
		public RuleCall getNameVariavelParserRuleCall_5_0() { return cNameVariavelParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ComparacaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Comparacao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSinalTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariavelParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameVariavelParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Comparacao:
		//	'(' name=sinal name=variavel name=variavel ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=sinal name=variavel name=variavel ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=sinal
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//sinal
		public RuleCall getNameSinalTerminalRuleCall_1_0() { return cNameSinalTerminalRuleCall_1_0; }
		
		//name=variavel
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//variavel
		public RuleCall getNameVariavelParserRuleCall_2_0() { return cNameVariavelParserRuleCall_2_0; }
		
		//name=variavel
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//variavel
		public RuleCall getNameVariavelParserRuleCall_3_0() { return cNameVariavelParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expressao");
		private final RuleCall cLettersTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expressao:
		//	letters;
		@Override public ParserRule getRule() { return rule; }
		
		//letters
		public RuleCall getLettersTerminalRuleCall() { return cLettersTerminalRuleCall; }
	}
	public class VariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.variavel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLettersTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDigitTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//variavel:
		//	letters | digit;
		@Override public ParserRule getRule() { return rule; }
		
		//letters | digit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//letters
		public RuleCall getLettersTerminalRuleCall_0() { return cLettersTerminalRuleCall_0; }
		
		//digit
		public RuleCall getDigitTerminalRuleCall_1() { return cDigitTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final ComputeElements pCompute;
	private final ParametroElements pParametro;
	private final RecursivoElements pRecursivo;
	private final ComparacaoElements pComparacao;
	private final ExpressaoElements pExpressao;
	private final TerminalRule tResultado;
	private final VariavelElements pVariavel;
	private final TerminalRule tSinal;
	private final TerminalRule tDigit;
	private final TerminalRule tLetters;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCompute = new ComputeElements();
		this.pParametro = new ParametroElements();
		this.pRecursivo = new RecursivoElements();
		this.pComparacao = new ComparacaoElements();
		this.pExpressao = new ExpressaoElements();
		this.tResultado = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.resultado");
		this.pVariavel = new VariavelElements();
		this.tSinal = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.sinal");
		this.tDigit = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.digit");
		this.tLetters = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.letters");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	compute=Compute;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Compute:
	//	'(define' Parametro ')';
	public ComputeElements getComputeAccess() {
		return pCompute;
	}
	
	public ParserRule getComputeRule() {
		return getComputeAccess().getRule();
	}
	
	//Parametro:
	//	'(' exp=expressao var=variavel ')';
	public ParametroElements getParametroAccess() {
		return pParametro;
	}
	
	public ParserRule getParametroRule() {
		return getParametroAccess().getRule();
	}
	
	////If:
	// //	'( if' Comparacao name=variavel ')' name=resultado '(' name=sinal '(' Recursivo
	// //;
	// Recursivo:
	//	'(' name=expressao '(' name=sinal name=variavel name=variavel ')' ')';
	public RecursivoElements getRecursivoAccess() {
		return pRecursivo;
	}
	
	public ParserRule getRecursivoRule() {
		return getRecursivoAccess().getRule();
	}
	
	//Comparacao:
	//	'(' name=sinal name=variavel name=variavel ')';
	public ComparacaoElements getComparacaoAccess() {
		return pComparacao;
	}
	
	public ParserRule getComparacaoRule() {
		return getComparacaoAccess().getRule();
	}
	
	//expressao:
	//	letters;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//terminal resultado:
	//	letters | digit;
	public TerminalRule getResultadoRule() {
		return tResultado;
	}
	
	//variavel:
	//	letters | digit;
	public VariavelElements getVariavelAccess() {
		return pVariavel;
	}
	
	public ParserRule getVariavelRule() {
		return getVariavelAccess().getRule();
	}
	
	//terminal sinal:
	//	'>' | '<' | '+' | '-' | '*' | '/';
	public TerminalRule getSinalRule() {
		return tSinal;
	}
	
	//terminal digit:
	//	'0'..'9'*;
	public TerminalRule getDigitRule() {
		return tDigit;
	}
	
	//terminal letters:
	//	'a'..'z'*;
	public TerminalRule getLettersRule() {
		return tLetters;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
