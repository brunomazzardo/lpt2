/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getComputeAssignment()); }
		(rule__Model__ComputeAssignment)
		{ after(grammarAccess.getModelAccess().getComputeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompute
entryRuleCompute
:
{ before(grammarAccess.getComputeRule()); }
	 ruleCompute
{ after(grammarAccess.getComputeRule()); } 
	 EOF 
;

// Rule Compute
ruleCompute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComputeAccess().getGroup()); }
		(rule__Compute__Group__0)
		{ after(grammarAccess.getComputeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParametro
entryRuleParametro
:
{ before(grammarAccess.getParametroRule()); }
	 ruleParametro
{ after(grammarAccess.getParametroRule()); } 
	 EOF 
;

// Rule Parametro
ruleParametro 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametroAccess().getGroup()); }
		(rule__Parametro__Group__0)
		{ after(grammarAccess.getParametroAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpressao
entryRuleexpressao
:
{ before(grammarAccess.getExpressaoRule()); }
	 ruleexpressao
{ after(grammarAccess.getExpressaoRule()); } 
	 EOF 
;

// Rule expressao
ruleexpressao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressaoAccess().getLettersTerminalRuleCall()); }
		RULE_LETTERS
		{ after(grammarAccess.getExpressaoAccess().getLettersTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevariavel
entryRulevariavel
:
{ before(grammarAccess.getVariavelRule()); }
	 rulevariavel
{ after(grammarAccess.getVariavelRule()); } 
	 EOF 
;

// Rule variavel
rulevariavel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariavelAccess().getAlternatives()); }
		(rule__Variavel__Alternatives)
		{ after(grammarAccess.getVariavelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variavel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariavelAccess().getLettersTerminalRuleCall_0()); }
		RULE_LETTERS
		{ after(grammarAccess.getVariavelAccess().getLettersTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariavelAccess().getDigitTerminalRuleCall_1()); }
		RULE_DIGIT
		{ after(grammarAccess.getVariavelAccess().getDigitTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compute__Group__0__Impl
	rule__Compute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeAccess().getDefineKeyword_0()); }
	'(define'
	{ after(grammarAccess.getComputeAccess().getDefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compute__Group__1__Impl
	rule__Compute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeAccess().getParametroParserRuleCall_1()); }
	ruleParametro
	{ after(grammarAccess.getComputeAccess().getParametroParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComputeAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getComputeAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parametro__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametro__Group__0__Impl
	rule__Parametro__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametroAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParametroAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametro__Group__1__Impl
	rule__Parametro__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametroAccess().getExpAssignment_1()); }
	(rule__Parametro__ExpAssignment_1)
	{ after(grammarAccess.getParametroAccess().getExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametro__Group__2__Impl
	rule__Parametro__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametroAccess().getVarAssignment_2()); }
	(rule__Parametro__VarAssignment_2)
	{ after(grammarAccess.getParametroAccess().getVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parametro__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametroAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getParametroAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ComputeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getComputeComputeParserRuleCall_0()); }
		ruleCompute
		{ after(grammarAccess.getModelAccess().getComputeComputeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__ExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametroAccess().getExpExpressaoParserRuleCall_1_0()); }
		ruleexpressao
		{ after(grammarAccess.getParametroAccess().getExpExpressaoParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parametro__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametroAccess().getVarVariavelParserRuleCall_2_0()); }
		rulevariavel
		{ after(grammarAccess.getParametroAccess().getVarVariavelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_RESULTADO : (RULE_LETTERS|RULE_DIGIT);

RULE_SINAL : ('>'|'<'|'+'|'-'|'*'|'/');

RULE_DIGIT : ('0'..'9')*;

RULE_LETTERS : ('a'..'z')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
